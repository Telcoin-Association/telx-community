import type { NextPage } from 'next'
import Head from 'next/head'
import GuideLayout from '../../components/guide/guideLayout'
import { GetStaticPaths, GetStaticProps } from "next";
import { titleToSlug } from '../../type-helpers';

import ArticleService from '../../services/article-service';
const articleService = new ArticleService();
import { ArticleProps } from "../../components/common/Article";

interface PageProps {
  articles: Array<ArticleProps>;
  params: {
    slug: string;
  }
}

export default function Page(props: PageProps) {
  const { articles, params } = props;
  const slug = params ? params.slug : '';

  // set the default selected article to be the welcome article
  let selectedArticle;
  selectedArticle = {
    createdAt: '',
    detail: '',
    id: '',
    locale: '',
    publishedAt: '',
    rawHtml: '',
    title: '',
    updatedAt: ''
  };
  // get the selected article based off the slug
  if (articles) {
    articles.map( article => {
      const variableArticleSlug = titleToSlug(article.title);
      if ( variableArticleSlug === slug ) {
        selectedArticle = article;
      }
    })
  }

  return (
    <div>
      <Head>
        <title>TELx Community</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="page">
        <div className="page-title">
          <h1>Education  |  Resources for DeFi and TELx</h1>
        </div>
  
        <GuideLayout 
          article={selectedArticle}
          articles={articles}
        />
      </div>

    </div>
  )
}

export const getStaticPaths: GetStaticPaths = async () => {
  // this method instructs NextJS on which `/about/[slug]`
  // URLs to statically generate.
  const articles = await articleService.fetchAll();
  const paths = articles.map((article: any) => ({
    params: {
      slug: titleToSlug(article.title),
    },
  }));
  
  return {
    paths: paths,
    fallback: true,
  }
}


// This function gets called at build time on server-side.
// It may be called again, on a serverless function, if
// revalidation is enabled and a new request comes in
export const getStaticProps: GetStaticProps = async (context) => {
  const { params } = context;
  const articles = await articleService.fetchAll();
  
  return {
    props: {
      articles,
      params
    },
    // Next.js will attempt to re-generate the page:
    // - When a request comes in
    // - At most once every 10 seconds
    revalidate: 10, // In seconds
  }
}
